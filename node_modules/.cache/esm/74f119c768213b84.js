let GraphQLObjectType,GraphQLString,GraphQLSchema,GraphQLID,GraphQLInt,GraphQLList,_,Models;_682‍.x([["default",()=>_682‍.o]]);_682‍.w("graphql",[["GraphQLObjectType",["GraphQLObjectType"],function(v){GraphQLObjectType=v}],["GraphQLString",["GraphQLString"],function(v){GraphQLString=v}],["GraphQLSchema",["GraphQLSchema"],function(v){GraphQLSchema=v}],["GraphQLID",["GraphQLID"],function(v){GraphQLID=v}],["GraphQLInt",["GraphQLInt"],function(v){GraphQLInt=v}],["GraphQLList",["GraphQLList"],function(v){GraphQLList=v}]]);_682‍.w("lodash",[["default",["_"],function(v){_=v}]]);_682‍.w("../Models/Models",[["default",["Models"],function(v){Models=v}]]);










// Dummy Data
var books = [
  { id: "1", name: "Test-1", genre: "Fantasy", authorId: "1" },
  { id: "2", name: "Test-2", genre: "Sci-fi", authorId: "2" },
  { id: "3", name: "Test-3", genre: "Action", authorId: "3" },
  { id: "4", name: "Test-4", genre: "Gw sads", authorId: "2" },
  { id: "5", name: "Test-5", genre: "asasds", authorId: "3" },
];
var authors = [
  { id: "1", name: "Author-1", age: 43 },
  { id: "2", name: "Author-2", age: 42 },
  { id: "3", name: "Author-3", age: 47 },
];

const BookType = new GraphQLObjectType({
  name: "Book",
  fields: () => ({
    id: { type: GraphQLID },
    name: { type: GraphQLString },
    genre: { type: GraphQLString },
    author: {
      type: AuthorType,
      resolve(parent, args) {
        return _.find(authors, { id: parent.authorId });
      },
    },
  }),
});

const AuthorType = new GraphQLObjectType({
  name: "Author",
  fields: () => ({
    id: { type: GraphQLID },
    name: { type: GraphQLString },
    age: { type: GraphQLInt },
    books: {
      type: new GraphQLList(BookType),
      resolve(parent, args) {
        return _.filter(books, { authorId: parent.id });
      },
    },
  }),
});

const Mutation = new GraphQLObjectType({});

const RootQuery = new GraphQLObjectType({
  name: "RootQueryType",
  fields: () => ({
    book: {
      type: BookType,
      args: { id: { type: GraphQLID } },
      resolve(parent, args) {
        //   Code to get data from database
        return _.find(books, { id: args.id });
      },
    },
    author: {
      type: AuthorType,
      args: { id: { type: GraphQLID } },
      resolve(parent, args) {
        return _.find(authors, { id: args.id });
      },
    },
    books: {
      type: new GraphQLList(BookType),
      resolve(parent, args) {
        return books;
      },
    },
    authors: {
      type: new GraphQLList(AuthorType),
      resolve(parent, args) {
        return authors;
      },
    },
  }),
});

_682‍.d(new GraphQLSchema({
  query: RootQuery,
}));
